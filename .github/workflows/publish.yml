name: Publish

on:
  push:
    branches:
      - master

jobs:
  prebuild-arm64-alpine:
    name: Prebuild on arm64 alpine
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache better-sqlite3
        id: cache-better-sqlite3
        uses: actions/cache@v2
        with:
          path: better-sqlite3
          key: 1-better-sqlite3-arm-linux
      - name: setup-qemu-action
        if: steps.cache-better-sqlite3.outputs.cache-hit != 'true'
        uses: docker/setup-qemu-action@v1
      - name: build better-sqlite3
        if: steps.cache-better-sqlite3.outputs.cache-hit != 'true'
        run: |
            docker run --entrypoint /bin/sh --name better_sqlite3 --platform linux/arm64 node:16-alpine -c "apk add build-base git python3 --update-cache && \
            git clone https://github.com/JoshuaWise/better-sqlite3 && \
            cd better-sqlite3 && \
            npm install --ignore-scripts && \
            npx --no-install prebuild -r electron -t 16.0.4 --include-regex 'better_sqlite3.node$'"
            docker cp better_sqlite3:/better-sqlite3/prebuilds ./
      - name: Upload better-sqlite3
        uses: actions/upload-artifact@v2
        with:
          name: better-sqlite3
          path: prebuilds
      - run: ls -l prebuilds

  publish:
    name: publish
    needs: prebuild-arm64-alpine
    runs-on: macos-11

    strategy:
      matrix:
        platform: [macos]
        arch: [arm64]

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v2

      - name: Download better_sqlite3
        uses: actions/download-artifact@v2
        with:
          name: better-sqlite3
          path: prebuilds

      - name: Install Node and NPM
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: xquartz
        run: |
          mv prebuilds/better-sqlite3-v7.4.5-electron-v99-linuxmusl-arm64.tar.gz prebuilds/better-sqlite3-v7.4.5-electron-v99-linux-arm64.tar.gz
          ls -l prebuilds
          wget https://github.com/XQuartz/XQuartz/releases/download/XQuartz-2.8.1/XQuartz-2.8.1.dmg
          hdiutil attach XQuartz-2.8.1.dmg
          cp /Volumes/XQuartz-2.8.1/XQuartz.pkg ./release/app/base/
          ls -l ./release/app/base/

      - name: Install dependencies
        run: |
          npm install

      - name: Publish releases
        env:
          # These values are used for auto updates signing
          #APPLE_ID: ${{ secrets.APPLE_ID }}
          #APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          #CSC_LINK: ${{ secrets.CSC_LINK }}
          #CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # This is used for uploading release assets to github
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
            ls -l prebuilds
            npm run postinstall
            npm run build
            npm exec electron-builder -- --publish always --win --mac --linux
